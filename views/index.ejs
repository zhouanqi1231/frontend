<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>main</title>
  <style>
    * {
      margin: 0;
      padding: 0;
    }
    html, body {
      height: 100%;
      width: 100%;
    }
    canvas {
      /*width: 100%;*/
      display: block;
      background: #000000;
    }
  </style>
</head>

<body>

  <canvas id="network" width="2000" height="2000"></canvas>

  <script src="https://d3js.org/d3.v4.min.js"></script>
  <script>

    // get json response from backend
    const httpRequest = new XMLHttpRequest();
    httpRequest.open('GET', 'http://127.0.0.1:5000/query_all', true);
    httpRequest.send();

    // 接受到response之后（左侧变量发生改变），右侧函数被回调
    httpRequest.onreadystatechange = function () {
      // store response json
      let graph;
      if (httpRequest.readyState === 4 && httpRequest.status === 200) {
        // get response (json but in string)
        const queryAllRes = httpRequest.responseText;
        graph = JSON.parse(queryAllRes);
        console.log(graph);
      } else { return; }

      const canvas = d3.select("#network"),
        width = canvas.attr("width"),
        height = canvas.attr("height"),
        // radius of node
        r = 3,
        // color pattern
        color = d3.scaleOrdinal([
          '#6bc3ff',
          '#ffbb7e',
          '#9aff9a',
          '#ff8c8c',
          '#d1aaff',
          '#a0e6ff',
          '#e3d177',
          '#99ffcc',
          '#ff99d3',
          '#d6ff98']),

              // '#d6efff',
              // '#ffe4c9',
              // '#d1ffd1',
              // '#ffc6c6',
              // '#dfc5ff',
              // '#caf2ff',
              // '#fff4c3',
              // '#b6ffdc',
              // '#ffbde2',
              // '#e3ffb9']),
        ctx = canvas.node().getContext("2d"),
        // **force simulation**
        // nodes don't collide, 参数定义的是两个圆心之间的距离
        // charge means 斥力
        // tell forceLink how to find the node
        simulation = d3.forceSimulation()
          .force("x", d3.forceX(width / 2))
          .force("y", d3.forceY(height / 2))
          .force("collide", d3.forceCollide())
          .force("charge", d3.forceManyBody()
            .strength(-100))
          .force("link", d3.forceLink()
            .id(function (d) {
              return d.node_id;
            }));


      simulation
        .nodes(graph.nodes)
        .on("tick", update)
        .force("link")
        .links(graph.links);


      canvas
        .call(d3.drag()
          .container(canvas.node())
          .subject(dragSubject)
          .on("start", dragStarted)
          .on("drag", dragged)
          .on("end", dragEnded));

      update();

      function update() {
        // clear canvas
        ctx.clearRect(0, 0, width, height);

        graph.links.forEach(drawLink);
        graph.nodes.forEach(drawNode);
      }


      // draw nodes and links
      function drawNode(d) {
        ctx.beginPath();
        ctx.globalAlpha = 1.0;
        ctx.fillStyle = color(d.label);
        // ctx.fillOpacity = 0.8;
        ctx.moveTo(d.x, d.y);
        ctx.arc(d.x, d.y, Math.log(d.value)+2, 0, 2 * Math.PI);
        ctx.fill();

        // node外围的线
        ctx.beginPath();
        ctx.globalAlpha=0.1;
        ctx.moveTo(d.x + Math.log(d.value)+2, d.y);
        ctx.arc(d.x, d.y, Math.log(d.value)+2, 0, 2 * Math.PI);
        ctx.strokeStyle = "#fff"
        ctx.stroke();
      }

      function drawLink(l) {
        ctx.beginPath();
        ctx.globalAlpha = 0.1;
        // ctx.globalAlpha = 1.0;
        // color
        ctx.strokeStyle = "#fff";
        // 透明度
        // ctx.strokeOpacity = 1;
        // ctx.strokeLinecap = "round";
        ctx.moveTo(l.source.x, l.source.y);
        ctx.lineTo(l.target.x, l.target.y);
        ctx.stroke();
      }

      // drag event
      function dragSubject() {
        return simulation.find(d3.event.x, d3.event.y);
      }

      function dragStarted() {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        d3.event.subject.fx = d3.event.subject.x;
        d3.event.subject.fy = d3.event.subject.y;
        console.log(d3.event.subject);
      }

      function dragged() {
        d3.event.subject.fx = d3.event.x;
        d3.event.subject.fy = d3.event.y;
      }

      function dragEnded() {
        if (!d3.event.active) simulation.alphaTarget(0);
        d3.event.subject.fx = null;
        d3.event.subject.fy = null;
      }
    };


  </script>