<html lang="es">

<head>
  <meta charset='utf-8'>
  <script src='js/d3.min.js'></script>
  <link rel='stylesheet' type='text/css' href='css/style.css'>
  <title>graph database page</title>
</head>

<body>
  <!-- info-panel -->
  <div id="info-panel" class="info-panel">
    <p style="text-align: right;"><a href="javascript:void(0)" onclick="closeInfoPanel()">X</a></p>
  </div>

  <!-- input-query -->
  <div id="input-panel" class="input-panel">
    <label for="input-query"></label><input type="text" id="input-query" name="input-query" class="input-query" onkeydown="return input_nl_query(event)">
  </div>

  <!-- query-result -->
  <div id="query-result-panel" class="query-result-panel">
    <p style="text-align: right;"><a href="javascript:void(0)" onclick="closeResPanel()">X</a></p>
    <div id="tab-wrapper" class="tab-wrapper"></div>
  </div>
  <script src='js/main.js' type='module'></script>

</body>

<script>
  var highlightedNodes = [];
  var highlightedLinks = [];
  var queryStrList = [];

  function openInfoPanel() {
    document.getElementById("info-panel").style.display = "block";
  }

  function closeInfoPanel() {
    document.getElementById("info-panel").style.display = "none";
  }

  function openResPanel() {
    document.getElementById("query-result-panel").style.display = "block";
  }

  function closeResPanel() {
    document.getElementById("query-result-panel").style.display = "none";
  }

  // clear color of all nodes and links
  function clearNodeLinkColor() {
    const nodes = document.getElementsByTagName("circle");
    const links = document.getElementsByTagName("line");
    for (let i = 0; i < nodes.length; i++)
      nodes[i].setAttribute("fill", nodes[i].getAttribute("original-fill"));
    for (let i = 0; i < links.length; i++)
      links[i].setAttribute("stroke", "#999");
  }

  // set color to red for nodes and links in `ids`
  function setNodeLinkColor(nodeIds, linkIds) {
    clearNodeLinkColor();
    var nodes = document.getElementsByTagName("circle");
    var links = document.getElementsByTagName("line");
    nodeIds.forEach((id) => {
      nodes[id].setAttribute("fill", "red");
    });
    linkIds.forEach((id) => {
      links[id].setAttribute("stroke", "red");
    });
  }

  function input_nl_query(e) {
    // when `enter` clicked
    if (e.keyCode !== 13) return;

    let queryStr = document.getElementById("input-query").value;

    let formData = new FormData();
    formData.append("query_str", queryStr);
    console.log(queryStr);

    // clear highlight list of result
    highlightedNodes.length = 0;
    highlightedLinks.length = 0;
    queryStrList.length = 0;

    // get resp from backend
    const req = new XMLHttpRequest();
    req.open("POST", "http://127.0.0.1:5000/nl_query", true);
    req.send(formData);

    req.onreadystatechange = function() {
      if (!(req.readyState === 4 && req.status === 200)) return;
      const json = req.responseText;

      const resp = JsonStrToMap(json);
      const queryResults = resp.get("query_results");

      removeFormerRes(); // delete former results (left panel
      clearNodeLinkColor(); // delete former highlight

      queryResults.forEach((result) => {
        queryStr = result["query_str"];
        const nodes = result["query_records"]["nodes"];
        const links = result["query_records"]["links"];
        highlightedNodes.push(nodes);
        highlightedLinks.push(links);
        queryStrList.push(queryStr);
      });

      for (
        let i = 0; i < highlightedNodes.length; i++ // add res tab (left panel
      )
        addATab(queryStrList[i], i);

      setNodeLinkColor(highlightedNodes[0], highlightedLinks[0]); // set node/link color
      openResPanel();
    };
  }

  function addATab(txt, index, nodes, links) {
    const tabs = document.getElementById("tab-wrapper");
    const tabId = index + 1;

    const input = document.createElement("input");
    input.type = "radio";
    input.name = "tab-radio";
    input.id = "tab-radio-" + tabId;
    input.setAttribute("class", "tab-radio");

    const label = document.createElement("label");
    label.setAttribute("for", "tab-radio-" + tabId);
    label.setAttribute("class", "tab-handler tab-handler-" + tabId);
    label.innerHTML = "" + tabId;
    label.onclick = function() {
      setNodeLinkColor(highlightedNodes[index], highlightedLinks[index]);
    };

    const div = document.createElement("div");
    div.setAttribute("class", "tab-content tab-content-" + tabId);
    div.innerHTML = txt;

    tabs.appendChild(input);
    tabs.appendChild(label);
    tabs.appendChild(div);
  }

  function removeFormerRes() {
    document.getElementById("tab-wrapper").remove();
    const div = document.createElement("div");
    div.setAttribute("class", "tab-wrapper");
    div.id = "tab-wrapper";
    document.getElementById("query-result-panel").appendChild(div);
  }

  function ObjToMap(obj) {
    const map = new Map();
    for (let key in obj) {
      map.set(key, obj[key]);
    }
    return map;
  }

  function JsonStrToMap(str) {
    return ObjToMap(JSON.parse(str));
  }

  function p(a) {
    console.log(a);
  }
</script>

</html>