<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <title>main</title>
  <style>
    * {
      margin: 0;
      padding: 0;
    }

    html,
    body {
      height: 100%;
      width: 100%;
    }

    canvas {
      /*width: 100%;*/
      display: block;
      background: #dcece6;
    }

    .info_panel {
      display: block;
      position: absolute;
      top: 23%;
      left: 72%;
      width: 22%;
      height: 45%;
      padding: 15px;
      /* border: 1px solid rgba(33, 137, 47, 0.597); */
      border-radius: 30px;
      background-color: rgba(33, 137, 47, 0.597);
      z-index: 1002;
      overflow: auto;
    }

    .input_panel {
      display: block;
      position: absolute;
      top: 2%;
      left: 1%;
      width: 20%;
      height: 7%;
      padding: 15px;
      /* border: 1px solid rgba(33, 137, 47, 0.597); */
      border-radius: 20px;
      /* background-color: rgba(33, 137, 47, 0.597); */
      z-index: 1002;
      overflow: auto;
    }

    .input_query {
      display: block;
      /* position: absolute; */
      top: 15%;
      left: 5%;
      width: 90%;
      height: 70%;
      padding: 5px;
      padding-left: 15px;
      padding-right: 15px;
      border: 1px;
      border-radius: 13px;
      font-size: 22px;
      color: #1f6e30;
      outline-color: #1f6e30;
      background-color: rgba(33, 137, 47, 0.597);
      z-index: 1002;
      overflow: auto;
    }
  </style>
  <!-- <script src="https://d3js.org/d3.v4.min.js"></script> -->
</head>

<body link="white">
  <!-- <p>示例弹出层：<a href="JavaScript:void(0)" onclick="openDialog()">请点这里</a></p> -->
  <!-- 悬浮框 -->
  <div id="info_panel" class="info_panel">
    <p align="right"><a href="javascript:void(0)" onclick="closeInfoPanel()" color="#fff">X</a></p>
  </div>
  <div id="input_panel" class="input_panel">
    <input type="text" id="input_query" name="input_query" class="input_query" required minlength="4" maxlength="8" size="10">
  </div>

  <script>
    // 创造一个canvas，大小自适应浏览器窗口
    var canvas = document.createElement("canvas");
    canvas.setAttribute("width", window.innerWidth);
    canvas.setAttribute("height", window.innerHeight);
    canvas.setAttribute("id", "network");
    document.body.appendChild(canvas);

    // get json response from backend
    const httpRequest = new XMLHttpRequest();
    httpRequest.open('GET', 'http://127.0.0.1:5000/query_all', true);
    httpRequest.send();

    // 接受到response之后（左侧变量发生改变），右侧函数被回调
    httpRequest.onreadystatechange = function() {
      // store response json
      let graph;
      if (httpRequest.readyState === 4 && httpRequest.status === 200) {
        // get response (json but in string)
        const queryAllRes = httpRequest.responseText;
        graph = JSON.parse(queryAllRes);
        console.log(graph);
      } else {
        return;
      }

      const canvas = d3.select("#network"),
        width = canvas.attr("width"),
        height = canvas.attr("height"),
        // radius of node
        r = 3,
        // color pattern
        color = d3.scaleOrdinal([
          '#2b851c',
          '#61b628',
          '#62ff62',
          '#ff4f4f',
          '#aa5fff',
          '#49ceff',
          '#ffe35e',
          '#56ffa9',
          '#ff55b6',
          '#abe758'
        ]);

      ctx = canvas.node().getContext("2d"),
        simulation = d3.forceSimulation()
        .force("x", d3.forceX(width / 2))
        .force("y", d3.forceY(height / 2))
        .force("collide", d3.forceCollide().radius(d => Math.log(d.value) + 6)) // 防止nodes碰撞, 参数定义的是两个圆心之间的距离
        .force("charge", d3.forceManyBody() // 斥力
          .strength(-100))
        .force("link", d3.forceLink() // tell forceLink how to find the node
          .id(function(d) {
            return d.node_id;
          }));


      simulation
        .nodes(graph.nodes)
        .on("tick", update)
        .force("link")
        .links(graph.links);


      canvas
        .call(d3.drag()
          .container(canvas.node())
          .subject(dragSubject)
          .on("start", dragStarted)
          .on("drag", dragged)
          .on("end", dragEnded));

      update();

      function update() {
        // clear canvas
        ctx.clearRect(0, 0, width, height);

        graph.links.forEach(drawLink);
        graph.nodes.forEach(drawNode);
      }

      // draw nodes and links
      function drawNode(d) {
        ctx.beginPath();
        ctx.globalAlpha = 1.0;
        ctx.fillStyle = color(d.label); // 根据label聚类分色
        // ctx.fillOpacity = 0.8;
        ctx.moveTo(d.x, d.y);
        ctx.arc(d.x, d.y, Math.log(d.value) + 6, 0, 2 * Math.PI);
        ctx.fill();

        // node外围的线，半透明，内侧。
        ctx.beginPath();
        ctx.globalAlpha = 0.3;
        ctx.lineWidth = 1;
        // ctx.globalAlpha=1;
        ctx.moveTo(d.x + Math.log(d.value) + 6, d.y);
        ctx.arc(d.x, d.y, Math.log(d.value) + 5.5, 0, 2 * Math.PI);
        ctx.strokeStyle = "#033118";
        ctx.stroke();
      }

      function drawLink(l) {
        ctx.beginPath();
        ctx.globalAlpha = 0.3;
        // ctx.globalAlpha = 1.0;
        // color
        ctx.strokeStyle = "black";
        ctx.lineWidth = 1;
        // 透明度
        // ctx.strokeOpacity = 1;
        // ctx.strokeLinecap = "round";
        ctx.moveTo(l.source.x, l.source.y);
        ctx.lineTo(l.target.x, l.target.y);
        ctx.stroke();
      }

      // drag event
      function dragSubject() {
        return simulation.find(d3.event.x, d3.event.y);
      }

      function dragStarted() {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        d3.event.subject.fx = d3.event.subject.x;
        d3.event.subject.fy = d3.event.subject.y;
        console.log(d3.event.subject);
      }

      function dragged() {
        d3.event.subject.fx = d3.event.x;
        d3.event.subject.fy = d3.event.y;
      }

      function dragEnded() {
        if (!d3.event.active) simulation.alphaTarget(0);
        d3.event.subject.fx = null;
        d3.event.subject.fy = null;
      }
    };
  </script>
</body>
<script type="text/javascript">
  function openInfoPanel() {
    document.getElementById('info_panel').style.display = 'block';
  }

  function closeInfoPanel() {
    document.getElementById('info_panel').style.display = 'none';
  }
</script>